package com.kinoor.helper;



import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.database.sqlite.SQLiteStatement;
import android.util.Log;

public class DatabaseHandler_Music extends SQLiteOpenHelper {
	 
	 
    // All Static variables
    // Database Version
    private static final int DATABASE_VERSION = 2;
    ArrayList<HashMap<String, String>> favobj;
    // Database Name
    private static final String DATABASE_NAME = "db_favorites_music";
 
    // Contacts table name
    private static final String TABLE_FAVORITES = "favourites_music";
 
    // Contacts Table Columns names
  public static final String KEY_ROW_ID = "id";
  public static final String KEY_ID = "itemid";
  
  public static final String KEY_ITEM1 = "item1";
  public static final String KEY_ITEM2 = "item2";
  public static final String KEY_ITEM3 = "item3";
  public static final String KEY_ITEM4 = "item4";
  public static final String KEY_ITEM5 = "item5";
  public static final String KEY_ITEM6 = "item6";
  public static final String KEY_ITEM7 = "item7";
  public static final String KEY_ITEM8 = "item8";
  public static final String KEY_ITEM9 = "item9";
  public static final String KEY_ITEM10 = "item10";
  
  public static final String KEY_TYPE = "type";
    
    public DatabaseHandler_Music dh;
   
    public DatabaseHandler_Music(Context context) {
        super(context, DATABASE_NAME, null, DATABASE_VERSION);
    }
 
    // Creating Tables
    @Override
    public void onCreate(SQLiteDatabase db) {
    	String CREATE_FAVORITES_TABLE = "CREATE TABLE " + TABLE_FAVORITES + "("+ KEY_ROW_ID + " INTEGER PRIMARY KEY,"
    																		   + KEY_ID + " INTEGER,"
    																		   
    																		   + KEY_ITEM1 + " TEXT,"
    																		   + KEY_ITEM2 + " TEXT," 
    																		   + KEY_ITEM3 + " TEXT,"
    																		   + KEY_ITEM4 + " TEXT,"
    																		   + KEY_ITEM5 + " TEXT,"
    																		   + KEY_ITEM6 + " TEXT," 
    																		   + KEY_ITEM7 + " TEXT,"
    																		   + KEY_ITEM8 + " TEXT,"
    																		   + KEY_ITEM9 + " TEXT,"
    																		   + KEY_ITEM10 + " TEXT," 
    																		   
    																		   + KEY_TYPE + " TEXT "+ ")";
       
    	db.execSQL(CREATE_FAVORITES_TABLE);
    }
 
    // Upgrading database
    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        // Drop older table if existed
        db.execSQL("DROP TABLE IF EXISTS " + TABLE_FAVORITES);
 
        // Create tables again
        onCreate(db);
    }
    
	
	
    
    public void addfav(int id,String item1,String item2,String item3,String item4,String item5,String item6,String item7,String item8,String item9,String item10,String type)
    {

    	
    	    SQLiteDatabase db = this.getWritableDatabase();
    	 
    	    ContentValues values = new ContentValues();
    	    values.put(KEY_ID, id); 

    	    values.put(KEY_ITEM1, item1);
    	    values.put(KEY_ITEM2, item2);
    	    values.put(KEY_ITEM3, item3);
    	    values.put(KEY_ITEM4, item4);
    	    values.put(KEY_ITEM5, item5);
    	    values.put(KEY_ITEM6, item6);
    	    values.put(KEY_ITEM7, item7);
    	    values.put(KEY_ITEM8, item8);
    	    values.put(KEY_ITEM9, item9);
    	    values.put(KEY_ITEM10, item10);
    	    
    	    values.put(KEY_TYPE, type);

    	    
    	   
    	    // Inserting Row
    	    db.insert(TABLE_FAVORITES, null, values);
    	    db.close();
    	    
    	    Log.i("Added","Added"+item1);

    }
    
    
    
    
    
    
    public int getmaxid()
    {
   
        SQLiteDatabase db = this.getWritableDatabase();
        final SQLiteStatement stmt = db
                .compileStatement("SELECT MAX(id) FROM "+TABLE_FAVORITES);

        return (int) stmt.simpleQueryForLong();
        
        
    	
    	
    }
    
 
    
 
    public void clearall(String type)
    {
    	
    	    SQLiteDatabase db = this.getWritableDatabase();
    	 
    	    db.execSQL("DELETE FROM "+TABLE_FAVORITES+" WHERE type='"+type+"';");
    	    
    	   
    	    
    	    
    	    
   }
    
    public void delete(String id,String type)
    {
    	
    	    SQLiteDatabase db = this.getWritableDatabase();
    	   
    	 
    	    db.execSQL("DELETE FROM "+TABLE_FAVORITES+" WHERE "+KEY_ITEM1+" = '"+id+"' AND type='"+type+"';");
    	    
    	  
    	    
    	    
}
    public List<String> getData(int id,String type) {
        
    	List<String> Data = new ArrayList<String>();
    	
        // Select All Query
    	String selectQuery = "SELECT * FROM "+TABLE_FAVORITES+" WHERE type = '"+type+"'";
     
        SQLiteDatabase db = this.getWritableDatabase();
        Cursor cursor = db.rawQuery(selectQuery, null);
     
        // looping through all rows and adding to list
        if (cursor.moveToFirst()) {
            do {
                
     
                
                
                // Adding contact to list
            	Data.add(cursor.getString(id));
            	 Log.i("cache retreived", "cache retreived");
               
            } while (cursor.moveToNext());
        }
        
        return Data;
     
       
    }

    
   
    
    
    public int getCount() {
        // Select All Query
        String selectQuery = "SELECT  * FROM " + TABLE_FAVORITES;
     
        SQLiteDatabase db = this.getWritableDatabase();
        Cursor cursor = db.rawQuery(selectQuery, null);
        return cursor.getCount();
       }

    
    
    
public boolean CheckTrackIsInList(String id,String type) {
    	
    	String selectQuery = "SELECT * FROM "+TABLE_FAVORITES+" WHERE "+KEY_ITEM1+" = '"+id+"' AND type='"+type+"';";    	  
     
        SQLiteDatabase db = this.getWritableDatabase();
        Cursor cursor = db.rawQuery(selectQuery, null);
        if(cursor.getCount() <= 0){
            cursor.close();
            return false;
        }
        cursor.close();
        return true;
    }   


// return first item of queue

public String FirstItemQueue(int id,String type) {
	
		String selectQuery = "SELECT * FROM "+TABLE_FAVORITES+" WHERE type = '"+type+"'";

 
	    SQLiteDatabase db = this.getWritableDatabase();
	    Cursor cursor = db.rawQuery(selectQuery, null);
	 
	    if (cursor.moveToFirst()) 
	    {
	        String first_item= cursor.getString(id);
	        Log.i("cache retreived", "cache retreived");
	        return first_item;
	    }
	    else
	    {
	    	return "";
	    }

}

// download list sort

public List<String> getData_Downloaded(int id,String album_id,String type) {
    
	List<String> Data = new ArrayList<String>();
	
    // Select All Query
	String selectQuery = "SELECT * FROM "+TABLE_FAVORITES+" WHERE item8='"+album_id+"' AND type='"+type+"';";   
 
    SQLiteDatabase db = this.getWritableDatabase();
    Cursor cursor = db.rawQuery(selectQuery, null);
 
    // looping through all rows and adding to list
    if (cursor.moveToFirst()) {
        do {
            
            
            // Adding contact to list
        	Data.add(cursor.getString(id));
        	 Log.i("cache retreived", "cache retreived");
           
        } while (cursor.moveToNext());
    }
    
    return Data;
 
   
}


public void delete_Downloaded_Album(String album_id,String type)
{
	
	    SQLiteDatabase db = this.getWritableDatabase();
	
	    db.execSQL("DELETE FROM "+TABLE_FAVORITES+" WHERE item1='"+album_id+"' AND type='"+type+"';");
	    
	  
	    
	    
}
    
    
}
